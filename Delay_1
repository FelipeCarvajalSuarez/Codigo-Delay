import pygame
import tkinter
from tkinter import *
from tkinter import filedialog
import tkinter.ttk as ttk
import numpy as np
from scipy.io import wavfile
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from PIL import ImageTk, Image  # Pillow
import winsound

root = Tk()
root.title("Mixer 1.0")
root.iconbitmap()
root.geometry("450x250")
# iniciar pygame
pygame.mixer.init()

# Funciones
# Canal 1
def add_song(): #Con esta función se importa el audio desde el dispositivo
    global sound1

    song = filedialog.askopenfilename(initialdir="~/Desktop/", title="Selecciona el archivo",
                                      filetypes=(("wav Files", "*.wav"),))
    song = song.replace("~/Desktop/", "")
    song_box.insert(END, song)

    # Cargar audio
    sound1 = pygame.mixer.Sound(song)
    song_box.insert(END, "song")

def play(): #Con esta función se reproduce el audio importado previamente
    # Se necesita una variable global para que todas las funciones puedan acceder a ella
    global sound1
    song = song_box.get(ACTIVE)
    sound1.play(loops=0)

def stop():#Con esta función se deja de reproducir el audio
    global sound1
    sound1.stop()
    song_box.selection_clear(ACTIVE)

def val_delay(b): #En esta función se guarda el valor del delay en muestras,
                  #este valor será dado por un slider
    global valor_delay
    valor_delay=t_delay.get()

def repeticiones(c):
    #En esta función se guarda el valor de las repeticiones,
    #este valor será dado por un slider que va de 1 a 3
    global rep
    rep = n_rep.get()

def aplicar_delay():#En esta función se operan los parámetros anteriores para formar el delay
    global mix
    global array_delay_1
    global sound1
    global vol
    global rep

    #Se toma por factor un valor decimal que se
    #multiplicara con las distintas repeticiones para que cada una suene más suave
    factor = 0.8
    factor1 = 0.6
    factor2 = 0.4
    factor3 = 0.2

    #Se pasa el audio importado previamente a un array para poderlo operar con los delays
    sound1a = np.array(sound1)

    #Se crean los arrays que estarán dados por el número de muestras que se indique
    array_delay = np.zeros((len(sound1a) + valor_delay, 2))
    array_delay[valor_delay:] = sound1a[:]
    array_delay
    #A cada array nuevo se le suma el anterior para obtener
    # el número de muestras necesario para cada repetición
    array_delay1 = np.zeros((len(array_delay) + valor_delay, 2))
    array_delay1[valor_delay:] = array_delay[:]
    array_delay1

    array_delay2 = np.zeros((len(array_delay1) + valor_delay, 2))
    array_delay2[valor_delay:] = array_delay1[:]
    array_delay2

    #Con la ayuda de condicionales se suman los distintos arrays, que son los delays con la señal original
    #Se multiplica por la variable vol dada anterior mente para controlar el volumen del audio
    #Se exporta el audio en la carpeta del proyecto en caso de querer ser usado
    if rep == 1:
        mix = ((sound1a * factor) + (array_delay[:len(sound1a)] * factor1)) * vol
        wavfile.write("Audio_con_delay.wav", 48000, np.int16(mix))
    if rep == 2:
        mix = ((sound1a * factor) + (array_delay[:len(sound1a)] * factor1) + (
                array_delay1[:len(sound1a)] * factor2)) * vol
        wavfile.write("Audio_con_delay.wav", 48000, np.int16(mix))
    if rep == 3:
        mix = ((sound1a * factor) + (array_delay[:len(sound1a)] * factor1) + (array_delay1[:len(sound1a)] * factor2) +
               (array_delay2[:len(sound1a)] * factor3)) * vol
        wavfile.write("Audio_con_delay.wav", 48000, np.int16(mix))

#Esta función establece el volumen del master, con la ayuda de un slider
def volumen(a):
    global vol
    vol=volume.get()
    volf=float(vol)*0.1
    vol=volf

#Función para reproducir el audio con delay
def esc_d():
    winsound.PlaySound("Audio_con_delay.wav", winsound.SND_ASYNC)
#Función para parar el audio con delay
def para_d():
    winsound.PlaySound("cancel.wav", winsound.SND_ASYNC)

##Se configuran los parámetros de la interfaz gráfica
ch1_frame = Frame(root)
ch1_frame.pack()

#Imagen de reproducir
img_play = Image.open('play.jpg')
img_play = img_play.resize((35, 35), Image.ANTIALIAS)  # Redimension (Alto, Ancho)
img_play = ImageTk.PhotoImage(img_play)
#Imagen de detener
img_stop = Image.open('stop.jpg')
img_stop = img_stop.resize((35, 35), Image.ANTIALIAS)
img_stop = ImageTk.PhotoImage(img_stop)

#Casilla de importación del audio
song_box = Listbox(ch1_frame, bg="white", fg="green", width=10, height=2, selectbackground="blue",
                   selectforeground="white")
#Botones de reproducir y detener
play_btn = Button(ch1_frame, image=img_play, command=play)
stop_btn = Button(ch1_frame, text="Stop", image=img_stop, command=stop)

song_box.grid(row=0, column=1)# padx=5, pady=10)
play_btn.grid(row=1, column=0)#, padx=5)
stop_btn.grid(row=1, column=2)

# MenuSongs
#Creación del menu
menu1 = Menu(root)
root.config(menu=menu1)

add_song_menu = Menu(menu1)
menu1.add_cascade(label="import audio", menu=add_song_menu)
add_song_menu.add_command(label="importar", command=add_song)

label_frame = Frame(root)
label_frame.pack()

Btn_delay = Button(label_frame, text="Aplicar Delay ", command=aplicar_delay)
Btn_delay.grid(row=2, column=0)

Btn_edelay = Button(label_frame, text="Escuchar Delay ", command=esc_d)
Btn_edelay.grid(row=2, column=1)

Btn_pdelay = Button(label_frame, text="Parar Delay ", command=para_d)
Btn_pdelay.grid(row=2, column=2)

# Sliders
volume = Scale(label_frame,from_=10 , to=0 , orient =VERTICAL, command=volumen)
volume.grid(row=4,column=0)
L_volum = Label(label_frame,text="Volumen", fg='#FFFFFF', bg='#000000')
L_volum.grid(row=3,column=0)

t_delay = Scale(label_frame,from_=25000, to=0, command=val_delay)
t_delay.grid(row=4,column=1)
l_vald = Label(label_frame,text="Muestas del delay", fg='#000000', bg='#0ED8D2')
l_vald.grid(row=3,column=1)

n_rep =Scale(label_frame,from_=3, to=1, command=repeticiones)
n_rep.set(2)
n_rep.grid(row=4,column=2)
l_rep = Label(label_frame,text="Número de repetiones", fg='#000000', bg='#0EB0D8')
l_rep.grid(row=3,column=2)

faders_frame = Frame(root)
faders_frame.pack()

root.mainloop()
